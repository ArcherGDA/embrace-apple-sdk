{"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/embrace_ios_core\/embracetracer\/spanbuilder(spanname:)","title":"func spanBuilder(spanName: String) -> SpanBuilder","type":"method"}],"path":"\/documentation\/embrace_ios_core\/embracetracer","title":"EmbraceTracer","type":"class"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/event\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/event\/init(name:timestamp:attributes:)","title":"init(name: String, timestamp: Date, attributes: [String : AttributeValue]?)","type":"init"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/event\/init(timestamp:event:)","title":"init(timestamp: Date, event: EmbraceSpanData.Event)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/event\/attributes","title":"var attributes: [String : AttributeValue]","type":"property"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/event\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/event\/timestamp","title":"var timestamp: Date","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/event\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/embrace_ios_core\/embracespandata\/event\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/embrace_ios_core\/embracespandata\/event","title":"EmbraceSpanData.Event","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/link\/init(context:attributes:)","title":"init(context: SpanContext, attributes: [String : AttributeValue])","type":"init"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/link\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/link\/attributes","title":"let attributes: [String : AttributeValue]","type":"property"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/link\/context","title":"let context: SpanContext","type":"property"}],"path":"\/documentation\/embrace_ios_core\/embracespandata\/link","title":"EmbraceSpanData.Link","type":"struct"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/==(_:_:)","title":"static func == (EmbraceSpanData, EmbraceSpanData) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/attributes","title":"var attributes: [String : AttributeValue]","type":"property"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/endtime","title":"var endTime: Date","type":"property"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/events","title":"var events: [EmbraceSpanData.Event]","type":"property"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/kind","title":"var kind: SpanKind","type":"property"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/links","title":"var links: [EmbraceSpanData.Link]","type":"property"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/parentspanid","title":"var parentSpanId: SpanId?","type":"property"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/spanid","title":"var spanId: SpanId","type":"property"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/starttime","title":"var startTime: Date","type":"property"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/status","title":"var status: Status","type":"property"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/traceflags","title":"var traceFlags: TraceFlags","type":"property"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/traceid","title":"var traceId: TraceId","type":"property"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/tracestate","title":"var traceState: TraceState","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/settingattributes(_:)","title":"func settingAttributes([String : AttributeValue]) -> EmbraceSpanData","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/settingendtime(_:)","title":"func settingEndTime(Date) -> EmbraceSpanData","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/settingevents(_:)","title":"func settingEvents([EmbraceSpanData.Event]) -> EmbraceSpanData","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/settinghasended(_:)","title":"func settingHasEnded(Bool) -> EmbraceSpanData","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/settinghasremoteparent(_:)","title":"func settingHasRemoteParent(Bool) -> EmbraceSpanData","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/settingkind(_:)","title":"func settingKind(SpanKind) -> EmbraceSpanData","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/settinglinks(_:)","title":"func settingLinks([EmbraceSpanData.Link]) -> EmbraceSpanData","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/settingname(_:)","title":"func settingName(String) -> EmbraceSpanData","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/settingparentspanid(_:)","title":"func settingParentSpanId(SpanId) -> EmbraceSpanData","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/settingspanid(_:)","title":"func settingSpanId(SpanId) -> EmbraceSpanData","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/settingstarttime(_:)","title":"func settingStartTime(Date) -> EmbraceSpanData","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/settingstatus(_:)","title":"func settingStatus(Status) -> EmbraceSpanData","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/settingtotalattributecount(_:)","title":"func settingTotalAttributeCount(Int) -> EmbraceSpanData","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/settingtotalrecordedevents(_:)","title":"func settingTotalRecordedEvents(Int) -> EmbraceSpanData","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/settingtotalrecordedlinks(_:)","title":"func settingTotalRecordedLinks(Int) -> EmbraceSpanData","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/settingtraceflags(_:)","title":"func settingTraceFlags(TraceFlags) -> EmbraceSpanData","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/settingtraceid(_:)","title":"func settingTraceId(TraceId) -> EmbraceSpanData","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/settingtracestate(_:)","title":"func settingTraceState(TraceState) -> EmbraceSpanData","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/embrace_ios_core\/embracespandata\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/embrace_ios_core\/embracespandata\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/databasedictionary","title":"var databaseDictionary: [String : DatabaseValue]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/databasechanges(from:)","title":"func databaseChanges(from: some EncodableRecord) throws -> [String : DatabaseValue]","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/databasechanges(modify:)","title":"func databaseChanges(modify: (inout Self) throws -> Void) throws -> [String : DatabaseValue]","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/databaseequals(_:)","title":"func databaseEquals(Self) -> Bool","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/databasecolumnencodingstrategy-3cjgl","title":"static let databaseColumnEncodingStrategy: DatabaseColumnEncodingStrategy","type":"property"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/databasecolumnencodingstrategy-8zqm8","title":"static var databaseColumnEncodingStrategy: DatabaseColumnEncodingStrategy","type":"property"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/databasedateencodingstrategy","title":"static var databaseDateEncodingStrategy: DatabaseDateEncodingStrategy","type":"property"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/databaseencodinguserinfo","title":"static var databaseEncodingUserInfo: [CodingUserInfoKey : Any]","type":"property"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/databaseuuidencodingstrategy","title":"static var databaseUUIDEncodingStrategy: DatabaseUUIDEncodingStrategy","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/databasejsonencoder(for:)","title":"static func databaseJSONEncoder(for: String) -> JSONEncoder","type":"method"}],"path":"\/documentation\/embrace_ios_core\/embracespandata\/encodablerecord-implementations","title":"EncodableRecord Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/embrace_ios_core\/embracespandata\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/init(row:)","title":"init(row: Row) throws","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/databasecolumndecodingstrategy-4mrou","title":"static var databaseColumnDecodingStrategy: DatabaseColumnDecodingStrategy","type":"property"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/databasecolumndecodingstrategy-d6b6","title":"static let databaseColumnDecodingStrategy: DatabaseColumnDecodingStrategy","type":"property"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/databasedatedecodingstrategy","title":"static var databaseDateDecodingStrategy: DatabaseDateDecodingStrategy","type":"property"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/databasedecodinguserinfo","title":"static var databaseDecodingUserInfo: [CodingUserInfoKey : Any]","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/databasejsondecoder(for:)","title":"static func databaseJSONDecoder(for: String) -> JSONDecoder","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/fetchall(_:)","title":"static func fetchAll(Database) throws -> [Self]","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/fetchall(_:_:)","title":"static func fetchAll(Database, some FetchRequest) throws -> [Self]","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/fetchall(_:arguments:adapter:)","title":"static func fetchAll(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> [Self]","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/fetchall(_:keys:)-4fgli","title":"static func fetchAll(Database, keys: [[String : (DatabaseValueConvertible)?]]) throws -> [Self]","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/fetchall(_:keys:)-bks8","title":"static func fetchAll<Keys>(Database, keys: Keys) throws -> [Self]","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/fetchall(_:sql:arguments:adapter:)","title":"static func fetchAll(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> [Self]","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/fetchcursor(_:)","title":"static func fetchCursor(Database) throws -> RecordCursor<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/fetchcursor(_:_:)","title":"static func fetchCursor(Database, some FetchRequest) throws -> RecordCursor<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/fetchcursor(_:arguments:adapter:)","title":"static func fetchCursor(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> RecordCursor<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/fetchcursor(_:keys:)-4xqyw","title":"static func fetchCursor(Database, keys: [[String : (DatabaseValueConvertible)?]]) throws -> RecordCursor<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/fetchcursor(_:keys:)-90ijj","title":"static func fetchCursor<Keys>(Database, keys: Keys) throws -> RecordCursor<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/fetchcursor(_:sql:arguments:adapter:)","title":"static func fetchCursor(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> RecordCursor<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/fetchone(_:)","title":"static func fetchOne(Database) throws -> Self?","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/fetchone(_:_:)","title":"static func fetchOne(Database, some FetchRequest) throws -> Self?","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/fetchone(_:arguments:adapter:)","title":"static func fetchOne(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> Self?","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/fetchone(_:key:)-1mj7z","title":"static func fetchOne(Database, key: [String : (DatabaseValueConvertible)?]?) throws -> Self?","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/fetchone(_:key:)-47xf9","title":"static func fetchOne(Database, key: some DatabaseValueConvertible) throws -> Self?","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/fetchone(_:sql:arguments:adapter:)","title":"static func fetchOne(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> Self?","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/fetchset(_:)","title":"static func fetchSet(Database) throws -> Set<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/fetchset(_:_:)","title":"static func fetchSet(Database, some FetchRequest) throws -> Set<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/fetchset(_:arguments:adapter:)","title":"static func fetchSet(Statement, arguments: StatementArguments?, adapter: (RowAdapter)?) throws -> Set<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/fetchset(_:keys:)-1tp0","title":"static func fetchSet<Keys>(Database, keys: Keys) throws -> Set<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/fetchset(_:keys:)-9b430","title":"static func fetchSet(Database, keys: [[String : (DatabaseValueConvertible)?]]) throws -> Set<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/fetchset(_:sql:arguments:adapter:)","title":"static func fetchSet(Database, sql: String, arguments: StatementArguments, adapter: (RowAdapter)?) throws -> Set<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/find(_:key:)-7pykq","title":"static func find(Database, key: [String : (DatabaseValueConvertible)?]) throws -> Self","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/find(_:key:)-ir1k","title":"static func find(Database, key: some DatabaseValueConvertible) throws -> Self","type":"method"}],"path":"\/documentation\/embrace_ios_core\/embracespandata\/fetchablerecord-implementations","title":"FetchableRecord Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/embrace_ios_core\/embracespandata\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/arounddelete(_:delete:)","title":"func aroundDelete(Database, delete: () throws -> Bool) throws","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/aroundinsert(_:insert:)","title":"func aroundInsert(Database, insert: () throws -> InsertionSuccess) throws","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/aroundsave(_:save:)","title":"func aroundSave(Database, save: () throws -> PersistenceSuccess) throws","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/aroundupdate(_:columns:update:)","title":"func aroundUpdate(Database, columns: Set<String>, update: () throws -> PersistenceSuccess) throws","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/delete(_:)","title":"func delete(Database) throws -> Bool","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/diddelete(deleted:)","title":"func didDelete(deleted: Bool)","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/didsave(_:)","title":"func didSave(PersistenceSuccess)","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/didupdate(_:)","title":"func didUpdate(PersistenceSuccess)","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/exists(_:)","title":"func exists(Database) throws -> Bool","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/insertandfetch(_:onconflict:)","title":"func insertAndFetch(Database, onConflict: Database.ConflictResolution?) throws -> Self?","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/inserted(_:onconflict:)","title":"func inserted(Database, onConflict: Database.ConflictResolution?) throws -> Self","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/saveandfetch(_:onconflict:)","title":"func saveAndFetch(Database, onConflict: Database.ConflictResolution?) throws -> Self?","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/saved(_:onconflict:)","title":"func saved(Database, onConflict: Database.ConflictResolution?) throws -> Self","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/update(_:onconflict:)","title":"func update(Database, onConflict: Database.ConflictResolution?) throws","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/update(_:onconflict:columns:)-46axq","title":"func update<Columns>(Database, onConflict: Database.ConflictResolution?, columns: Columns) throws","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/update(_:onconflict:columns:)-rz9b","title":"func update<Columns>(Database, onConflict: Database.ConflictResolution?, columns: Columns) throws","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/updateandfetch(_:onconflict:)","title":"func updateAndFetch(Database, onConflict: Database.ConflictResolution?) throws -> Self?","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/updateandfetch(_:onconflict:as:)","title":"func updateAndFetch<T>(Database, onConflict: Database.ConflictResolution?, as: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/updateandfetch(_:onconflict:columns:selection:fetch:)-20xzo","title":"func updateAndFetch<T, Columns>(Database, onConflict: Database.ConflictResolution?, columns: Columns, selection: [SQLSelectable], fetch: (Statement) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/updateandfetch(_:onconflict:columns:selection:fetch:)-53e7u","title":"func updateAndFetch<T, Columns>(Database, onConflict: Database.ConflictResolution?, columns: Columns, selection: [SQLSelectable], fetch: (Statement) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/updateandfetch(_:onconflict:selection:fetch:)","title":"func updateAndFetch<T>(Database, onConflict: Database.ConflictResolution?, selection: [SQLSelectable], fetch: (Statement) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/updatechanges(_:onconflict:from:)","title":"func updateChanges<Record>(Database, onConflict: Database.ConflictResolution?, from: Record) throws -> Bool","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/updatechanges(_:onconflict:modify:)","title":"func updateChanges(Database, onConflict: Database.ConflictResolution?, modify: (inout Self) throws -> Void) throws -> Bool","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/updatechangesandfetch(_:onconflict:as:modify:)","title":"func updateChangesAndFetch<T>(Database, onConflict: Database.ConflictResolution?, as: T.Type, modify: (inout Self) throws -> Void) throws -> T?","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/updatechangesandfetch(_:onconflict:modify:)","title":"func updateChangesAndFetch(Database, onConflict: Database.ConflictResolution?, modify: (inout Self) throws -> Void) throws -> Self?","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/updatechangesandfetch(_:onconflict:selection:fetch:modify:)","title":"func updateChangesAndFetch<T>(Database, onConflict: Database.ConflictResolution?, selection: [SQLSelectable], fetch: (Statement) throws -> T?, modify: (inout Self) throws -> Void) throws -> T?","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/willdelete(_:)","title":"func willDelete(Database) throws","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/willsave(_:)","title":"func willSave(Database) throws","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/willupdate(_:columns:)","title":"func willUpdate(Database, columns: Set<String>) throws","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/persistenceconflictpolicy","title":"static var persistenceConflictPolicy: PersistenceConflictPolicy","type":"property"}],"path":"\/documentation\/embrace_ios_core\/embracespandata\/mutablepersistablerecord-implementations","title":"MutablePersistableRecord Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/didinsert(_:)","title":"func didInsert(InsertionSuccess)","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/insert(_:onconflict:)","title":"func insert(Database, onConflict: Database.ConflictResolution?) throws","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/insertandfetch(_:onconflict:as:)","title":"func insertAndFetch<T>(Database, onConflict: Database.ConflictResolution?, as: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/insertandfetch(_:onconflict:selection:fetch:)","title":"func insertAndFetch<T>(Database, onConflict: Database.ConflictResolution?, selection: [SQLSelectable], fetch: (Statement) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/save(_:onconflict:)","title":"func save(Database, onConflict: Database.ConflictResolution?) throws","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/saveandfetch(_:onconflict:as:)","title":"func saveAndFetch<T>(Database, onConflict: Database.ConflictResolution?, as: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/saveandfetch(_:onconflict:selection:fetch:)","title":"func saveAndFetch<T>(Database, onConflict: Database.ConflictResolution?, selection: [SQLSelectable], fetch: (Statement) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/upsert(_:)","title":"func upsert(Database) throws","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/upsertandfetch(_:as:onconflict:doupdate:)","title":"func upsertAndFetch<T>(Database, as: T.Type, onConflict: [String], doUpdate: ((TableAlias) -> [ColumnAssignment])?) throws -> T","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/upsertandfetch(_:onconflict:doupdate:)","title":"func upsertAndFetch(Database, onConflict: [String], doUpdate: ((TableAlias) -> [ColumnAssignment])?) throws -> Self","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/willinsert(_:)","title":"func willInsert(Database) throws","type":"method"}],"path":"\/documentation\/embrace_ios_core\/embracespandata\/persistablerecord-implementations","title":"PersistableRecord Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/request(for:)","title":"func request<A>(for: A) -> QueryInterfaceRequest<A.RowDecoder>","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/databaseselection","title":"static var databaseSelection: [SQLSelectable]","type":"property"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/databasetablename-30iep","title":"static let databaseTableName: String","type":"property"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/databasetablename-853j2","title":"static var databaseTableName: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/aliased(_:)","title":"static func aliased(TableAlias) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/all()","title":"static func all() -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/annotated(with:)-2hd9u","title":"static func annotated(with: [SQLSelectable]) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/annotated(with:)-46dsc","title":"static func annotated(with: SQLSelectable...) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/annotated(with:)-80j42","title":"static func annotated(with: [AssociationAggregate<Self>]) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/annotated(with:)-9wido","title":"static func annotated(with: AssociationAggregate<Self>...) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/annotated(withoptional:)","title":"static func annotated<A>(withOptional: A) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/annotated(withrequired:)","title":"static func annotated<A>(withRequired: A) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/association(to:)","title":"static func association<Destination>(to: CommonTableExpression<Destination>) -> JoinAssociation<Self, Destination>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/association(to:on:)","title":"static func association<Destination>(to: CommonTableExpression<Destination>, on: (TableAlias, TableAlias) -> SQLExpressible) -> JoinAssociation<Self, Destination>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/belongsto(_:key:using:)-5ed2i","title":"static func belongsTo<Destination>(Table<Destination>, key: String?, using: ForeignKey?) -> BelongsToAssociation<Self, Destination>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/belongsto(_:key:using:)-9y2y9","title":"static func belongsTo<Destination>(Destination.Type, key: String?, using: ForeignKey?) -> BelongsToAssociation<Self, Destination>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/deleteall(_:)","title":"static func deleteAll(Database) throws -> Int","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/deleteall(_:keys:)-3lg0t","title":"static func deleteAll(Database, keys: [[String : (DatabaseValueConvertible)?]]) throws -> Int","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/deleteall(_:keys:)-3rh5p","title":"static func deleteAll<Keys>(Database, keys: Keys) throws -> Int","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/deleteone(_:key:)-3pob","title":"static func deleteOne(Database, key: some DatabaseValueConvertible) throws -> Bool","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/deleteone(_:key:)-8xxav","title":"static func deleteOne(Database, key: [String : (DatabaseValueConvertible)?]) throws -> Bool","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/exists(_:key:)-57buw","title":"static func exists(Database, key: some DatabaseValueConvertible) throws -> Bool","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/exists(_:key:)-5xgp0","title":"static func exists(Database, key: [String : (DatabaseValueConvertible)?]) throws -> Bool","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/fetchcount(_:)","title":"static func fetchCount(Database) throws -> Int","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/filter(_:)","title":"static func filter(some SQLSpecificExpressible) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/filter(key:)-3wfpf","title":"static func filter(key: [String : (DatabaseValueConvertible)?]?) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/filter(key:)-7pib6","title":"static func filter(key: some DatabaseValueConvertible) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/filter(keys:)-63tlx","title":"static func filter(keys: [[String : (DatabaseValueConvertible)?]]) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/filter(keys:)-7m8vu","title":"static func filter<Keys>(keys: Keys) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/filter(literal:)","title":"static func filter(literal: SQL) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/filter(sql:arguments:)","title":"static func filter(sql: String, arguments: StatementArguments) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/hasmany(_:key:using:)-78hah","title":"static func hasMany<Destination>(Destination.Type, key: String?, using: ForeignKey?) -> HasManyAssociation<Self, Destination>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/hasmany(_:key:using:)-als3","title":"static func hasMany<Destination>(Table<Destination>, key: String?, using: ForeignKey?) -> HasManyAssociation<Self, Destination>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/hasmany(_:through:using:key:)","title":"static func hasMany<Pivot, Target>(Target.RowDecoder.Type, through: Pivot, using: Target, key: String?) -> HasManyThroughAssociation<Self, Target.RowDecoder>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/hasone(_:key:using:)-1g4hf","title":"static func hasOne<Destination>(Table<Destination>, key: String?, using: ForeignKey?) -> HasOneAssociation<Self, Destination>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/hasone(_:key:using:)-8ix26","title":"static func hasOne<Destination>(Destination.Type, key: String?, using: ForeignKey?) -> HasOneAssociation<Self, Destination>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/hasone(_:through:using:key:)","title":"static func hasOne<Pivot, Target>(Target.RowDecoder.Type, through: Pivot, using: Target, key: String?) -> HasOneThroughAssociation<Self, Target.RowDecoder>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/having(_:)","title":"static func having(AssociationAggregate<Self>) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/including(all:)","title":"static func including<A>(all: A) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/including(optional:)","title":"static func including<A>(optional: A) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/including(required:)","title":"static func including<A>(required: A) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/joining(optional:)","title":"static func joining<A>(optional: A) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/joining(required:)","title":"static func joining<A>(required: A) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/limit(_:offset:)","title":"static func limit(Int, offset: Int?) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/matching(_:)-2yi8z","title":"static func matching(FTS3Pattern?) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/matching(_:)-393hj","title":"static func matching(FTS5Pattern?) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/none()","title":"static func none() -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/numberofselectedcolumns(_:)","title":"static func numberOfSelectedColumns(Database) throws -> Int","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/order(_:)-2n3pd","title":"static func order(SQLOrderingTerm...) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/order(_:)-7c0f8","title":"static func order([SQLOrderingTerm]) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/order(literal:)","title":"static func order(literal: SQL) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/order(sql:arguments:)","title":"static func order(sql: String, arguments: StatementArguments) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/orderbyprimarykey()","title":"static func orderByPrimaryKey() -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/recordnotfound(_:key:)","title":"static func recordNotFound(Database, key: some DatabaseValueConvertible) -> Error","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/recordnotfound(key:)","title":"static func recordNotFound(key: [String : (DatabaseValueConvertible)?]) -> RecordError","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/select(_:)-5qz1u","title":"static func select([SQLSelectable]) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/select(_:)-6bdea","title":"static func select(SQLSelectable...) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/select(_:as:)-17rl9","title":"static func select<RowDecoder>([SQLSelectable], as: RowDecoder.Type) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/select(_:as:)-8z5jg","title":"static func select<RowDecoder>(SQLSelectable..., as: RowDecoder.Type) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/select(literal:)","title":"static func select(literal: SQL) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/select(literal:as:)","title":"static func select<RowDecoder>(literal: SQL, as: RowDecoder.Type) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/select(sql:arguments:)","title":"static func select(sql: String, arguments: StatementArguments) -> QueryInterfaceRequest<Self>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/select(sql:arguments:as:)","title":"static func select<RowDecoder>(sql: String, arguments: StatementArguments, as: RowDecoder.Type) -> QueryInterfaceRequest<RowDecoder>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/selectprimarykey(as:)","title":"static func selectPrimaryKey<PrimaryKey>(as: PrimaryKey.Type) -> QueryInterfaceRequest<PrimaryKey>","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/updateall(_:onconflict:_:)-3sfd2","title":"static func updateAll(Database, onConflict: Database.ConflictResolution?, [ColumnAssignment]) throws -> Int","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/updateall(_:onconflict:_:)-93tio","title":"static func updateAll(Database, onConflict: Database.ConflictResolution?, ColumnAssignment...) throws -> Int","type":"method"},{"path":"\/documentation\/embrace_ios_core\/embracespandata\/with(_:)","title":"static func with<RowDecoder>(CommonTableExpression<RowDecoder>) -> QueryInterfaceRequest<Self>","type":"method"}],"path":"\/documentation\/embrace_ios_core\/embracespandata\/tablerecord-implementations","title":"TableRecord Implementations","type":"symbol"}],"path":"\/documentation\/embrace_ios_core\/embracespandata","title":"EmbraceSpanData","type":"struct"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/embrace_ios_core\/==(_:_:)-5f83u","title":"func == ([EmbraceSpanData.Link], [EmbraceSpanData.Link]) -> Bool","type":"op"},{"path":"\/documentation\/embrace_ios_core\/==(_:_:)-9s10g","title":"func == (EmbraceSpanData.Link, EmbraceSpanData.Link) -> Bool","type":"op"}],"path":"\/documentation\/embrace_ios_core","title":"embrace-ios-core","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}