#!/bin/bash

print_usage() {
    echo "Usage: version_bump <version_number>"
    echo ""
    echo "Arguments:"
    echo "  <version_number>    The version number to set in the EmbraceMeta.swift file"
}

validate_semver() {
    local version="$1"
    local semver_regex="^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$"

    version=$1
    if [ -z "$version" ]; then
        echo "Error: version number not specified" >&2

        print_usage
        exit 1
    fi

    # if version does not match regex, exit with an error
    if [[ ! "$version" =~ $semver_regex ]]; then
        echo "Invalid semantic version" >&2
        exit 2
    fi
}

VERSION_FILE_PATH="Sources/EmbraceCore/EmbraceMeta.swift"
VERSION_NUMBER="$1"

# Validate semantic version of version number, exit if not valid
# if function returns error, exit with error
validate_semver "$VERSION_NUMBER"

# Find the root of the repo
ROOT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )/.."

# Find full path of file
VERSION_FILE="$ROOT_DIR/$VERSION_FILE_PATH"

# Add a Heredoc string for the template of a swift source file and store this string into a variable
FILE_SOURCE=$(cat <<-EOM
//
//  Copyright Â© 2023 Embrace Mobile, Inc. All rights reserved.
//

// This file is automatically generated by the "${BASH_SOURCE[0]}" script
// Do not edit this file manually

class EmbraceMeta {
    static let sdkVersion = "$VERSION_NUMBER"
}
EOM
)

# Write the source to file
echo "$FILE_SOURCE" > "$VERSION_FILE"

# Check if VERSION_FILE can be compiled in swift
# If the swift file cannot be compiled, then exit with an error
swiftc "$VERSION_FILE" -o /dev/null
if [ $? -ne 0 ]; then
    echo "Error: $VERSION_FILE cannot be compiled"
    exit 1
fi
